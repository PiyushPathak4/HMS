{"version":3,"file":"node-build.mjs","sources":["../../server/routes/demo.ts","../../server/db/connection.ts","../../server/db/models/Staff.ts","../../shared/staff.ts","../../server/routes/fallback-data.ts","../../server/routes/staff.ts","../../server/db/models/Doctor.ts","../../server/routes/doctors.ts","../../server/index.ts","../../server/node-build.ts"],"sourcesContent":["import { RequestHandler } from \"express\";\nimport { DemoResponse } from \"@shared/api\";\n\nexport const handleDemo: RequestHandler = (req, res) => {\n  const response: DemoResponse = {\n    message: \"Hello from Express server\",\n  };\n  res.status(200).json(response);\n};\n","import mongoose from 'mongoose';\r\n\r\nconst MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/medicare-plus';\r\n\r\nlet isConnected = false;\r\n\r\nexport async function connectToDatabase() {\r\n  if (isConnected) {\r\n    return;\r\n  }\r\n\r\n  try {\r\n    await mongoose.connect(MONGODB_URI, {\r\n      serverSelectionTimeoutMS: 5000, // Timeout after 5 seconds\r\n      connectTimeoutMS: 10000, // Give up initial connection after 10 seconds\r\n    });\r\n    isConnected = true;\r\n    console.log('✅ Connected to MongoDB');\r\n  } catch (error) {\r\n    console.error('❌ MongoDB connection error:', error);\r\n    console.log('💡 Tip: Make sure MongoDB is running or use MongoDB Atlas cloud database');\r\n    console.log('💡 For MongoDB Atlas: Set MONGODB_URI=mongodb+srv://username:password@cluster.mongodb.net/medicare-plus');\r\n    console.log('⚠️ Using fallback data mode - database operations will use in-memory storage');\r\n    // Don't throw error, allow application to continue with fallback data\r\n  }\r\n}\r\n\r\nexport async function disconnectFromDatabase() {\r\n  if (!isConnected) {\r\n    return;\r\n  }\r\n\r\n  try {\r\n    await mongoose.disconnect();\r\n    isConnected = true;\r\n    console.log('✅ Disconnected from MongoDB');\r\n  } catch (error) {\r\n    console.error('❌ MongoDB disconnection error:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Handle graceful shutdown\r\nprocess.on('SIGINT', async () => {\r\n  await disconnectFromDatabase();\r\n  process.exit(0);\r\n});\r\n\r\nprocess.on('SIGTERM', async () => {\r\n  await disconnectFromDatabase();\r\n  process.exit(0);\r\n});\r\n","import mongoose, { Schema, Document } from 'mongoose';\n\nexport interface IStaff extends Document {\n  employeeId: string;\n  name: string;\n  role: string;\n  department: string;\n  phone: string;\n  email: string;\n  license?: string;\n  experience: string;\n  status: 'Active' | 'Inactive' | 'On Leave' | 'In Surgery' | 'Off Duty';\n  shift: 'Day' | 'Evening' | 'Night' | 'Rotating';\n  schedule: string;\n  specializations: string[];\n  education: string;\n  certifications: string[];\n  avatar?: string;\n  rating: number;\n  patientsToday: number;\n  totalPatients: number;\n  salary?: number;\n  joinDate: Date;\n  lastActive?: Date;\n  emergencyContact?: {\n    name: string;\n    phone: string;\n    relationship: string;\n  };\n  address?: {\n    street: string;\n    city: string;\n    state: string;\n    zipCode: string;\n  };\n}\n\nconst StaffSchema = new Schema<IStaff>({\n  employeeId: {\n    type: String,\n    required: true,\n    unique: true,\n    index: true\n  },\n  name: {\n    type: String,\n    required: true,\n    index: true\n  },\n  role: {\n    type: String,\n    required: true,\n    index: true\n  },\n  department: {\n    type: String,\n    required: true,\n    index: true\n  },\n  phone: {\n    type: String,\n    required: true\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n    lowercase: true\n  },\n  license: {\n    type: String,\n    sparse: true\n  },\n  experience: {\n    type: String,\n    required: true\n  },\n  status: {\n    type: String,\n    enum: ['Active', 'Inactive', 'On Leave', 'In Surgery', 'Off Duty'],\n    default: 'Active',\n    index: true\n  },\n  shift: {\n    type: String,\n    enum: ['Day', 'Evening', 'Night', 'Rotating'],\n    required: true\n  },\n  schedule: {\n    type: String,\n    required: true\n  },\n  specializations: [{\n    type: String\n  }],\n  education: {\n    type: String,\n    required: true\n  },\n  certifications: [{\n    type: String\n  }],\n  avatar: {\n    type: String\n  },\n  rating: {\n    type: Number,\n    min: 0,\n    max: 5,\n    default: 0\n  },\n  patientsToday: {\n    type: Number,\n    default: 0\n  },\n  totalPatients: {\n    type: Number,\n    default: 0\n  },\n  salary: {\n    type: Number\n  },\n  joinDate: {\n    type: Date,\n    default: Date.now\n  },\n  lastActive: {\n    type: Date\n  },\n  emergencyContact: {\n    name: String,\n    phone: String,\n    relationship: String\n  },\n  address: {\n    street: String,\n    city: String,\n    state: String,\n    zipCode: String\n  }\n}, {\n  timestamps: true,\n  toJSON: { virtuals: true },\n  toObject: { virtuals: true }\n});\n\n// Indexes for performance\nStaffSchema.index({ department: 1, status: 1 });\nStaffSchema.index({ role: 1, status: 1 });\nStaffSchema.index({ name: 'text', email: 'text' });\n\n// Virtual for full experience calculation\nStaffSchema.virtual('experienceYears').get(function() {\n  const years = this.experience.match(/\\d+/);\n  return years ? parseInt(years[0]) : 0;\n});\n\n// Pre-save middleware\nStaffSchema.pre('save', function(next) {\n  if (this.isModified('status') && this.status === 'Active') {\n    this.lastActive = new Date();\n  }\n  next();\n});\n\nexport const Staff = mongoose.model<IStaff>('Staff', StaffSchema);\n","import { z } from 'zod';\n\n// Staff Types\nexport const StaffStatusSchema = z.enum(['Active', 'Inactive', 'On Leave', 'In Surgery', 'Off Duty']);\nexport const ShiftTypeSchema = z.enum(['Day', 'Evening', 'Night', 'Rotating']);\n\nexport const CreateStaffSchema = z.object({\n  employeeId: z.string().min(1, 'Employee ID is required'),\n  name: z.string().min(1, 'Name is required'),\n  role: z.string().min(1, 'Role is required'),\n  department: z.string().min(1, 'Department is required'),\n  phone: z.string().min(1, 'Phone is required'),\n  email: z.string().email('Valid email is required'),\n  license: z.string().optional(),\n  experience: z.string().min(1, 'Experience is required'),\n  status: StaffStatusSchema.default('Active'),\n  shift: ShiftTypeSchema,\n  schedule: z.string().min(1, 'Schedule is required'),\n  specializations: z.array(z.string()).default([]),\n  education: z.string().min(1, 'Education is required'),\n  certifications: z.array(z.string()).default([]),\n  avatar: z.string().optional(),\n  rating: z.number().min(0).max(5).default(0),\n  salary: z.number().optional(),\n  emergencyContact: z.object({\n    name: z.string(),\n    phone: z.string(),\n    relationship: z.string()\n  }).optional(),\n  address: z.object({\n    street: z.string(),\n    city: z.string(),\n    state: z.string(),\n    zipCode: z.string()\n  }).optional()\n});\n\nexport const UpdateStaffSchema = CreateStaffSchema.partial().omit({ employeeId: true });\n\nexport const StaffQuerySchema = z.object({\n  department: z.string().optional(),\n  role: z.string().optional(),\n  status: StaffStatusSchema.optional(),\n  shift: ShiftTypeSchema.optional(),\n  search: z.string().optional(),\n  page: z.string().transform(Number).default('1'),\n  limit: z.string().transform(Number).default('10')\n});\n\n// Doctor Types\nexport const DoctorStatusSchema = z.enum(['Available', 'In Surgery', 'In Consultation', 'Off Duty', 'On Call']);\n\nexport const CreateDoctorSchema = z.object({\n  employeeId: z.string().min(1, 'Employee ID is required'),\n  name: z.string().min(1, 'Name is required'),\n  specialization: z.string().min(1, 'Specialization is required'),\n  department: z.string().min(1, 'Department is required'),\n  phone: z.string().min(1, 'Phone is required'),\n  email: z.string().email('Valid email is required'),\n  medicalLicense: z.string().min(1, 'Medical license is required'),\n  experience: z.string().min(1, 'Experience is required'),\n  status: DoctorStatusSchema.default('Available'),\n  shift: ShiftTypeSchema,\n  schedule: z.string().min(1, 'Schedule is required'),\n  education: z.string().min(1, 'Education is required'),\n  certifications: z.array(z.string()).default([]),\n  languages: z.array(z.string()).default(['English']),\n  avatar: z.string().optional(),\n  rating: z.number().min(0).max(5).default(0),\n  consultationFee: z.number().optional(),\n  bio: z.string().optional(),\n  achievements: z.array(z.string()).default([]),\n  emergencyContact: z.object({\n    name: z.string(),\n    phone: z.string(),\n    relationship: z.string()\n  }).optional(),\n  address: z.object({\n    street: z.string(),\n    city: z.string(),\n    state: z.string(),\n    zipCode: z.string()\n  }).optional()\n});\n\nexport const UpdateDoctorSchema = CreateDoctorSchema.partial().omit({ employeeId: true });\n\nexport const DoctorQuerySchema = z.object({\n  department: z.string().optional(),\n  specialization: z.string().optional(),\n  status: DoctorStatusSchema.optional(),\n  shift: ShiftTypeSchema.optional(),\n  search: z.string().optional(),\n  page: z.string().transform(Number).default('1'),\n  limit: z.string().transform(Number).default('10')\n});\n\n// Response Types\nexport interface StaffResponse {\n  id: string;\n  employeeId: string;\n  name: string;\n  role: string;\n  department: string;\n  phone: string;\n  email: string;\n  license?: string;\n  experience: string;\n  status: string;\n  shift: string;\n  schedule: string;\n  specializations: string[];\n  education: string;\n  certifications: string[];\n  avatar?: string;\n  rating: number;\n  patientsToday: number;\n  totalPatients: number;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface DoctorResponse {\n  id: string;\n  employeeId: string;\n  name: string;\n  specialization: string;\n  department: string;\n  phone: string;\n  email: string;\n  medicalLicense: string;\n  experience: string;\n  status: string;\n  shift: string;\n  schedule: string;\n  education: string;\n  certifications: string[];\n  languages: string[];\n  avatar?: string;\n  rating: number;\n  patientsToday: number;\n  totalPatients: number;\n  consultationFee?: number;\n  bio?: string;\n  achievements: string[];\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface PaginatedResponse<T> {\n  data: T[];\n  pagination: {\n    page: number;\n    limit: number;\n    total: number;\n    pages: number;\n  };\n}\n\nexport type CreateStaffRequest = z.infer<typeof CreateStaffSchema>;\nexport type UpdateStaffRequest = z.infer<typeof UpdateStaffSchema>;\nexport type StaffQuery = z.infer<typeof StaffQuerySchema>;\n\nexport type CreateDoctorRequest = z.infer<typeof CreateDoctorSchema>;\nexport type UpdateDoctorRequest = z.infer<typeof UpdateDoctorSchema>;\nexport type DoctorQuery = z.infer<typeof DoctorQuerySchema>;\n","// Fallback data when MongoDB is not available\nexport const fallbackStaffData = [\n  {\n    id: '1',\n    employeeId: 'EMP001',\n    name: 'Dr. Emily Smith',\n    role: 'Cardiologist',\n    department: 'Cardiology',\n    phone: '+1 (555) 123-4567',\n    email: 'emily.smith@medicare.com',\n    license: 'MD123456',\n    experience: '12 years',\n    status: 'Active',\n    shift: 'Day',\n    schedule: 'Mon-Fri 8AM-6PM',\n    specializations: ['Interventional Cardiology', 'Heart Failure'],\n    education: 'MD - Harvard Medical School',\n    certifications: ['Board Certified Cardiologist', 'ACLS', 'BLS'],\n    rating: 4.9,\n    patientsToday: 12,\n    totalPatients: 2847,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  },\n  {\n    id: '2',\n    employeeId: 'EMP002',\n    name: 'Dr. Robert Wilson',\n    role: 'Internal Medicine',\n    department: 'Internal Medicine',\n    phone: '+1 (555) 987-6543',\n    email: 'robert.wilson@medicare.com',\n    license: 'MD789012',\n    experience: '15 years',\n    status: 'Active',\n    shift: 'Day',\n    schedule: 'Mon-Fri 7AM-5PM',\n    specializations: ['Diabetes Management', 'Hypertension'],\n    education: 'MD - Johns Hopkins University',\n    certifications: ['Internal Medicine Board Certified', 'ACLS', 'BLS'],\n    rating: 4.8,\n    patientsToday: 15,\n    totalPatients: 3124,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  },\n  {\n    id: '3',\n    employeeId: 'EMP003',\n    name: 'Sarah Johnson',\n    role: 'Registered Nurse',\n    department: 'Emergency',\n    phone: '+1 (555) 456-7890',\n    email: 'sarah.johnson@medicare.com',\n    license: 'RN345678',\n    experience: '8 years',\n    status: 'Active',\n    shift: 'Night',\n    schedule: 'Mon-Wed-Fri 6PM-6AM',\n    specializations: ['Emergency Care', 'Trauma Nursing'],\n    education: 'BSN - University of California',\n    certifications: ['CCRN', 'ACLS', 'BLS', 'PALS'],\n    rating: 4.9,\n    patientsToday: 0,\n    totalPatients: 1567,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  },\n  {\n    id: '4',\n    employeeId: 'EMP004',\n    name: 'Dr. Lisa Brown',\n    role: 'Orthopedic Surgeon',\n    department: 'Orthopedics',\n    phone: '+1 (555) 234-5678',\n    email: 'lisa.brown@medicare.com',\n    license: 'MD456789',\n    experience: '10 years',\n    status: 'In Surgery',\n    shift: 'Day',\n    schedule: 'Tue-Thu-Sat 8AM-8PM',\n    specializations: ['Joint Replacement', 'Sports Medicine'],\n    education: 'MD - Stanford University',\n    certifications: ['Orthopedic Surgery Board Certified', 'ACLS', 'BLS'],\n    rating: 4.7,\n    patientsToday: 6,\n    totalPatients: 1834,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  },\n  {\n    id: '5',\n    employeeId: 'EMP005',\n    name: 'Mike Thompson',\n    role: 'Radiology Technician',\n    department: 'Radiology',\n    phone: '+1 (555) 345-6789',\n    email: 'mike.thompson@medicare.com',\n    license: 'RT123456',\n    experience: '6 years',\n    status: 'Active',\n    shift: 'Day',\n    schedule: 'Mon-Fri 9AM-5PM',\n    specializations: ['CT Imaging', 'MRI', 'X-Ray'],\n    education: 'Associates - Community College',\n    certifications: ['ARRT Certified', 'CT Certified', 'MRI Certified'],\n    rating: 4.6,\n    patientsToday: 28,\n    totalPatients: 892,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }\n];\n\nexport const fallbackDoctorData = [\n  {\n    id: '1',\n    employeeId: 'DOC001',\n    name: 'Emily Smith',\n    specialization: 'Cardiology',\n    department: 'Cardiology',\n    phone: '+1 (555) 123-4567',\n    email: 'emily.smith.md@medicare.com',\n    medicalLicense: 'MD123456789',\n    experience: '12 years',\n    status: 'Available',\n    shift: 'Day',\n    schedule: 'Mon-Fri 8AM-6PM',\n    education: 'MD - Harvard Medical School',\n    certifications: ['Board Certified Cardiologist', 'ACLS', 'BLS'],\n    languages: ['English', 'Spanish'],\n    rating: 4.9,\n    patientsToday: 12,\n    totalPatients: 2847,\n    consultationFee: 250,\n    bio: 'Dr. Emily Smith is a highly experienced cardiologist specializing in interventional cardiology and heart failure management.',\n    achievements: ['Best Doctor Award 2023', 'Research Excellence Award', '500+ Successful Cardiac Procedures'],\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  },\n  {\n    id: '2',\n    employeeId: 'DOC002',\n    name: 'Robert Wilson',\n    specialization: 'Internal Medicine',\n    department: 'Internal Medicine',\n    phone: '+1 (555) 987-6543',\n    email: 'robert.wilson.md@medicare.com',\n    medicalLicense: 'MD987654321',\n    experience: '15 years',\n    status: 'Available',\n    shift: 'Day',\n    schedule: 'Mon-Fri 7AM-5PM',\n    education: 'MD - Johns Hopkins University',\n    certifications: ['Internal Medicine Board Certified', 'ACLS', 'BLS'],\n    languages: ['English'],\n    rating: 4.8,\n    patientsToday: 15,\n    totalPatients: 3124,\n    consultationFee: 200,\n    bio: 'Dr. Robert Wilson is an expert in internal medicine with extensive experience in diabetes management and hypertension.',\n    achievements: ['Excellence in Patient Care', 'Medical Education Leadership Award'],\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  },\n  {\n    id: '3',\n    employeeId: 'DOC003',\n    name: 'Lisa Brown',\n    specialization: 'Orthopedic Surgery',\n    department: 'Orthopedics',\n    phone: '+1 (555) 234-5678',\n    email: 'lisa.brown.md@medicare.com',\n    medicalLicense: 'MD456789123',\n    experience: '10 years',\n    status: 'In Surgery',\n    shift: 'Day',\n    schedule: 'Tue-Thu-Sat 8AM-8PM',\n    education: 'MD - Stanford University',\n    certifications: ['Orthopedic Surgery Board Certified', 'ACLS', 'BLS'],\n    languages: ['English', 'French'],\n    rating: 4.7,\n    patientsToday: 6,\n    totalPatients: 1834,\n    consultationFee: 300,\n    bio: 'Dr. Lisa Brown specializes in joint replacement and sports medicine with a focus on minimally invasive techniques.',\n    achievements: ['Top Surgeon Award', 'Innovation in Orthopedic Surgery', '1000+ Successful Joint Replacements'],\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }\n];\n\nlet staffMemory = [...fallbackStaffData];\nlet doctorMemory = [...fallbackDoctorData];\n\nexport const inMemoryStorage = {\n  staff: {\n    getAll: () => staffMemory,\n    getById: (id: string) => staffMemory.find(s => s.id === id),\n    create: (data: any) => {\n      const newStaff = { ...data, id: Date.now().toString(), createdAt: new Date().toISOString(), updatedAt: new Date().toISOString() };\n      staffMemory.push(newStaff);\n      return newStaff;\n    },\n    update: (id: string, data: any) => {\n      const index = staffMemory.findIndex(s => s.id === id);\n      if (index !== -1) {\n        staffMemory[index] = { ...staffMemory[index], ...data, updatedAt: new Date().toISOString() };\n        return staffMemory[index];\n      }\n      return null;\n    },\n    delete: (id: string) => {\n      const index = staffMemory.findIndex(s => s.id === id);\n      if (index !== -1) {\n        staffMemory.splice(index, 1);\n        return true;\n      }\n      return false;\n    },\n    getDepartments: () => [...new Set(staffMemory.map(s => s.department))],\n    getRoles: () => [...new Set(staffMemory.map(s => s.role))]\n  },\n  doctors: {\n    getAll: () => doctorMemory,\n    getById: (id: string) => doctorMemory.find(d => d.id === id),\n    create: (data: any) => {\n      const newDoctor = { ...data, id: Date.now().toString(), createdAt: new Date().toISOString(), updatedAt: new Date().toISOString() };\n      doctorMemory.push(newDoctor);\n      return newDoctor;\n    },\n    update: (id: string, data: any) => {\n      const index = doctorMemory.findIndex(d => d.id === id);\n      if (index !== -1) {\n        doctorMemory[index] = { ...doctorMemory[index], ...data, updatedAt: new Date().toISOString() };\n        return doctorMemory[index];\n      }\n      return null;\n    },\n    delete: (id: string) => {\n      const index = doctorMemory.findIndex(d => d.id === id);\n      if (index !== -1) {\n        doctorMemory.splice(index, 1);\n        return true;\n      }\n      return false;\n    },\n    getSpecializations: () => [...new Set(doctorMemory.map(d => d.specialization))],\n    getDepartments: () => [...new Set(doctorMemory.map(d => d.department))]\n  }\n};\n","import { RequestHandler } from 'express';\nimport { Staff } from '../db/models/Staff';\nimport {\n  CreateStaffSchema,\n  UpdateStaffSchema,\n  StaffQuerySchema,\n  StaffResponse,\n  PaginatedResponse\n} from '../../shared/staff';\nimport { connectToDatabase } from '../db/connection';\nimport { inMemoryStorage } from './fallback-data';\n\n// Helper function to transform Staff document to response\nconst transformStaffToResponse = (staff: any): StaffResponse => ({\n  id: staff._id.toString(),\n  employeeId: staff.employeeId,\n  name: staff.name,\n  role: staff.role,\n  department: staff.department,\n  phone: staff.phone,\n  email: staff.email,\n  license: staff.license,\n  experience: staff.experience,\n  status: staff.status,\n  shift: staff.shift,\n  schedule: staff.schedule,\n  specializations: staff.specializations,\n  education: staff.education,\n  certifications: staff.certifications,\n  avatar: staff.avatar,\n  rating: staff.rating,\n  patientsToday: staff.patientsToday,\n  totalPatients: staff.totalPatients,\n  createdAt: staff.createdAt.toISOString(),\n  updatedAt: staff.updatedAt.toISOString()\n});\n\n// GET /api/staff - Get all staff with pagination and filtering\nexport const getAllStaff: RequestHandler = async (req, res) => {\n  try {\n    let staff: any[] = [];\n    let useFallback = false;\n\n    try {\n      await connectToDatabase();\n\n      const query = StaffQuerySchema.parse(req.query);\n      const { page, limit, search, department, role, status, shift } = query;\n\n      // Build filter object\n      const filter: any = {};\n\n      if (department) filter.department = new RegExp(department, 'i');\n      if (role) filter.role = new RegExp(role, 'i');\n      if (status) filter.status = status;\n      if (shift) filter.shift = shift;\n\n      if (search) {\n        filter.$or = [\n          { name: new RegExp(search, 'i') },\n          { email: new RegExp(search, 'i') },\n          { employeeId: new RegExp(search, 'i') },\n          { role: new RegExp(search, 'i') },\n          { department: new RegExp(search, 'i') }\n        ];\n      }\n\n      const skip = (page - 1) * limit;\n\n      // Get total count and staff data\n      const [total, staffData] = await Promise.all([\n        Staff.countDocuments(filter),\n        Staff.find(filter)\n          .sort({ createdAt: -1 })\n          .skip(skip)\n          .limit(limit)\n          .lean()\n      ]);\n\n      const response: PaginatedResponse<StaffResponse> = {\n        data: staffData.map(transformStaffToResponse),\n        pagination: {\n          page,\n          limit,\n          total,\n          pages: Math.ceil(total / limit)\n        }\n      };\n\n      res.json(response);\n    } catch (dbError) {\n      console.log('Using fallback data due to MongoDB connection issue');\n      useFallback = true;\n    }\n\n    if (useFallback) {\n      const query = StaffQuerySchema.parse(req.query);\n      const { page, limit, search, department, role, status, shift } = query;\n\n      // Use in-memory fallback data\n      let filteredStaff = inMemoryStorage.staff.getAll();\n\n      // Apply filters\n      if (search) {\n        const searchLower = search.toLowerCase();\n        filteredStaff = filteredStaff.filter(s =>\n          s.name.toLowerCase().includes(searchLower) ||\n          s.email.toLowerCase().includes(searchLower) ||\n          s.employeeId.toLowerCase().includes(searchLower) ||\n          s.role.toLowerCase().includes(searchLower) ||\n          s.department.toLowerCase().includes(searchLower)\n        );\n      }\n\n      if (department) filteredStaff = filteredStaff.filter(s => s.department.toLowerCase().includes(department.toLowerCase()));\n      if (role) filteredStaff = filteredStaff.filter(s => s.role.toLowerCase().includes(role.toLowerCase()));\n      if (status) filteredStaff = filteredStaff.filter(s => s.status === status);\n      if (shift) filteredStaff = filteredStaff.filter(s => s.shift === shift);\n\n      // Pagination\n      const total = filteredStaff.length;\n      const skip = (page - 1) * limit;\n      const paginatedStaff = filteredStaff.slice(skip, skip + limit);\n\n      const response: PaginatedResponse<StaffResponse> = {\n        data: paginatedStaff as StaffResponse[],\n        pagination: {\n          page,\n          limit,\n          total,\n          pages: Math.ceil(total / limit)\n        }\n      };\n\n      res.json(response);\n    }\n  } catch (error) {\n    console.error('Error fetching staff:', error);\n    res.status(500).json({ error: 'Failed to fetch staff' });\n  }\n};\n\n// GET /api/staff/:id - Get staff by ID\nexport const getStaffById: RequestHandler = async (req, res) => {\n  try {\n    await connectToDatabase();\n    \n    const staff = await Staff.findById(req.params.id).lean();\n    if (!staff) {\n      return res.status(404).json({ error: 'Staff member not found' });\n    }\n    \n    res.json(transformStaffToResponse(staff));\n  } catch (error) {\n    console.error('Error fetching staff member:', error);\n    res.status(500).json({ error: 'Failed to fetch staff member' });\n  }\n};\n\n// POST /api/staff - Create new staff member\nexport const createStaff: RequestHandler = async (req, res) => {\n  try {\n    await connectToDatabase();\n    \n    const validatedData = CreateStaffSchema.parse(req.body);\n    \n    // Check if employee ID or email already exists\n    const existingStaff = await Staff.findOne({\n      $or: [\n        { employeeId: validatedData.employeeId },\n        { email: validatedData.email }\n      ]\n    });\n    \n    if (existingStaff) {\n      return res.status(400).json({ \n        error: 'Staff member with this employee ID or email already exists' \n      });\n    }\n    \n    const staff = new Staff(validatedData);\n    await staff.save();\n    \n    res.status(201).json(transformStaffToResponse(staff.toObject()));\n  } catch (error) {\n    console.error('Error creating staff member:', error);\n    if (error.name === 'ZodError') {\n      return res.status(400).json({ error: 'Invalid data', details: error.errors });\n    }\n    res.status(500).json({ error: 'Failed to create staff member' });\n  }\n};\n\n// PUT /api/staff/:id - Update staff member\nexport const updateStaff: RequestHandler = async (req, res) => {\n  try {\n    await connectToDatabase();\n    \n    const validatedData = UpdateStaffSchema.parse(req.body);\n    \n    // Check if email is being updated and already exists\n    if (validatedData.email) {\n      const existingStaff = await Staff.findOne({\n        email: validatedData.email,\n        _id: { $ne: req.params.id }\n      });\n      \n      if (existingStaff) {\n        return res.status(400).json({ \n          error: 'Staff member with this email already exists' \n        });\n      }\n    }\n    \n    const staff = await Staff.findByIdAndUpdate(\n      req.params.id,\n      validatedData,\n      { new: true, runValidators: true }\n    ).lean();\n    \n    if (!staff) {\n      return res.status(404).json({ error: 'Staff member not found' });\n    }\n    \n    res.json(transformStaffToResponse(staff));\n  } catch (error) {\n    console.error('Error updating staff member:', error);\n    if (error.name === 'ZodError') {\n      return res.status(400).json({ error: 'Invalid data', details: error.errors });\n    }\n    res.status(500).json({ error: 'Failed to update staff member' });\n  }\n};\n\n// DELETE /api/staff/:id - Delete staff member\nexport const deleteStaff: RequestHandler = async (req, res) => {\n  try {\n    await connectToDatabase();\n    \n    const staff = await Staff.findByIdAndDelete(req.params.id);\n    if (!staff) {\n      return res.status(404).json({ error: 'Staff member not found' });\n    }\n    \n    res.json({ message: 'Staff member deleted successfully' });\n  } catch (error) {\n    console.error('Error deleting staff member:', error);\n    res.status(500).json({ error: 'Failed to delete staff member' });\n  }\n};\n\n// GET /api/staff/departments - Get unique departments\nexport const getDepartments: RequestHandler = async (req, res) => {\n  try {\n    try {\n      await connectToDatabase();\n      const departments = await Staff.distinct('department');\n      res.json(departments.sort());\n    } catch (dbError) {\n      // Use fallback data\n      const departments = inMemoryStorage.staff.getDepartments();\n      res.json(departments.sort());\n    }\n  } catch (error) {\n    console.error('Error fetching departments:', error);\n    res.status(500).json({ error: 'Failed to fetch departments' });\n  }\n};\n\n// GET /api/staff/roles - Get unique roles\nexport const getRoles: RequestHandler = async (req, res) => {\n  try {\n    try {\n      await connectToDatabase();\n      const roles = await Staff.distinct('role');\n      res.json(roles.sort());\n    } catch (dbError) {\n      // Use fallback data\n      const roles = inMemoryStorage.staff.getRoles();\n      res.json(roles.sort());\n    }\n  } catch (error) {\n    console.error('Error fetching roles:', error);\n    res.status(500).json({ error: 'Failed to fetch roles' });\n  }\n};\n\n// PATCH /api/staff/:id/status - Update staff status\nexport const updateStaffStatus: RequestHandler = async (req, res) => {\n  try {\n    await connectToDatabase();\n    \n    const { status } = req.body;\n    if (!status) {\n      return res.status(400).json({ error: 'Status is required' });\n    }\n    \n    const staff = await Staff.findByIdAndUpdate(\n      req.params.id,\n      { status, lastActive: new Date() },\n      { new: true, runValidators: true }\n    ).lean();\n    \n    if (!staff) {\n      return res.status(404).json({ error: 'Staff member not found' });\n    }\n    \n    res.json(transformStaffToResponse(staff));\n  } catch (error) {\n    console.error('Error updating staff status:', error);\n    res.status(500).json({ error: 'Failed to update staff status' });\n  }\n};\n","import mongoose, { Schema, Document } from 'mongoose';\n\nexport interface IDoctor extends Document {\n  employeeId: string;\n  name: string;\n  specialization: string;\n  department: string;\n  phone: string;\n  email: string;\n  medicalLicense: string;\n  experience: string;\n  status: 'Available' | 'In Surgery' | 'In Consultation' | 'Off Duty' | 'On Call';\n  shift: 'Day' | 'Evening' | 'Night' | 'Rotating';\n  schedule: string;\n  education: string;\n  certifications: string[];\n  languages: string[];\n  avatar?: string;\n  rating: number;\n  patientsToday: number;\n  totalPatients: number;\n  consultationFee?: number;\n  joinDate: Date;\n  lastActive?: Date;\n  workingHours: {\n    monday: { start: string; end: string; available: boolean };\n    tuesday: { start: string; end: string; available: boolean };\n    wednesday: { start: string; end: string; available: boolean };\n    thursday: { start: string; end: string; available: boolean };\n    friday: { start: string; end: string; available: boolean };\n    saturday: { start: string; end: string; available: boolean };\n    sunday: { start: string; end: string; available: boolean };\n  };\n  emergencyContact?: {\n    name: string;\n    phone: string;\n    relationship: string;\n  };\n  address?: {\n    street: string;\n    city: string;\n    state: string;\n    zipCode: string;\n  };\n  bio?: string;\n  achievements?: string[];\n}\n\nconst DoctorSchema = new Schema<IDoctor>({\n  employeeId: {\n    type: String,\n    required: true,\n    unique: true,\n    index: true\n  },\n  name: {\n    type: String,\n    required: true,\n    index: true\n  },\n  specialization: {\n    type: String,\n    required: true,\n    index: true\n  },\n  department: {\n    type: String,\n    required: true,\n    index: true\n  },\n  phone: {\n    type: String,\n    required: true\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n    lowercase: true\n  },\n  medicalLicense: {\n    type: String,\n    required: true,\n    unique: true\n  },\n  experience: {\n    type: String,\n    required: true\n  },\n  status: {\n    type: String,\n    enum: ['Available', 'In Surgery', 'In Consultation', 'Off Duty', 'On Call'],\n    default: 'Available',\n    index: true\n  },\n  shift: {\n    type: String,\n    enum: ['Day', 'Evening', 'Night', 'Rotating'],\n    required: true\n  },\n  schedule: {\n    type: String,\n    required: true\n  },\n  education: {\n    type: String,\n    required: true\n  },\n  certifications: [{\n    type: String\n  }],\n  languages: [{\n    type: String\n  }],\n  avatar: {\n    type: String\n  },\n  rating: {\n    type: Number,\n    min: 0,\n    max: 5,\n    default: 0\n  },\n  patientsToday: {\n    type: Number,\n    default: 0\n  },\n  totalPatients: {\n    type: Number,\n    default: 0\n  },\n  consultationFee: {\n    type: Number\n  },\n  joinDate: {\n    type: Date,\n    default: Date.now\n  },\n  lastActive: {\n    type: Date\n  },\n  workingHours: {\n    monday: {\n      start: { type: String, default: '09:00' },\n      end: { type: String, default: '17:00' },\n      available: { type: Boolean, default: true }\n    },\n    tuesday: {\n      start: { type: String, default: '09:00' },\n      end: { type: String, default: '17:00' },\n      available: { type: Boolean, default: true }\n    },\n    wednesday: {\n      start: { type: String, default: '09:00' },\n      end: { type: String, default: '17:00' },\n      available: { type: Boolean, default: true }\n    },\n    thursday: {\n      start: { type: String, default: '09:00' },\n      end: { type: String, default: '17:00' },\n      available: { type: Boolean, default: true }\n    },\n    friday: {\n      start: { type: String, default: '09:00' },\n      end: { type: String, default: '17:00' },\n      available: { type: Boolean, default: true }\n    },\n    saturday: {\n      start: { type: String, default: '09:00' },\n      end: { type: String, default: '13:00' },\n      available: { type: Boolean, default: false }\n    },\n    sunday: {\n      start: { type: String, default: '09:00' },\n      end: { type: String, default: '13:00' },\n      available: { type: Boolean, default: false }\n    }\n  },\n  emergencyContact: {\n    name: String,\n    phone: String,\n    relationship: String\n  },\n  address: {\n    street: String,\n    city: String,\n    state: String,\n    zipCode: String\n  },\n  bio: {\n    type: String\n  },\n  achievements: [{\n    type: String\n  }]\n}, {\n  timestamps: true,\n  toJSON: { virtuals: true },\n  toObject: { virtuals: true }\n});\n\n// Indexes for performance\nDoctorSchema.index({ department: 1, status: 1 });\nDoctorSchema.index({ specialization: 1, status: 1 });\nDoctorSchema.index({ name: 'text', specialization: 'text' });\n\n// Virtual for experience years\nDoctorSchema.virtual('experienceYears').get(function() {\n  const years = this.experience.match(/\\d+/);\n  return years ? parseInt(years[0]) : 0;\n});\n\n// Virtual for full name with title\nDoctorSchema.virtual('fullTitle').get(function() {\n  return `Dr. ${this.name}`;\n});\n\n// Pre-save middleware\nDoctorSchema.pre('save', function(next) {\n  if (this.isModified('status') && ['Available', 'In Consultation', 'In Surgery'].includes(this.status)) {\n    this.lastActive = new Date();\n  }\n  next();\n});\n\nexport const Doctor = mongoose.model<IDoctor>('Doctor', DoctorSchema);\n","import { RequestHandler } from 'express';\nimport { Doctor } from '../db/models/Doctor';\nimport {\n  CreateDoctorSchema,\n  UpdateDoctorSchema,\n  DoctorQuerySchema,\n  DoctorResponse,\n  PaginatedResponse\n} from '../../shared/staff';\nimport { connectToDatabase } from '../db/connection';\n\n// Helper function to transform Doctor document to response\nconst transformDoctorToResponse = (doctor: any): DoctorResponse => ({\n  id: doctor._id.toString(),\n  employeeId: doctor.employeeId,\n  name: doctor.name,\n  specialization: doctor.specialization,\n  department: doctor.department,\n  phone: doctor.phone,\n  email: doctor.email,\n  medicalLicense: doctor.medicalLicense,\n  experience: doctor.experience,\n  status: doctor.status,\n  shift: doctor.shift,\n  schedule: doctor.schedule,\n  education: doctor.education,\n  certifications: doctor.certifications,\n  languages: doctor.languages,\n  avatar: doctor.avatar,\n  rating: doctor.rating,\n  patientsToday: doctor.patientsToday,\n  totalPatients: doctor.totalPatients,\n  consultationFee: doctor.consultationFee,\n  bio: doctor.bio,\n  achievements: doctor.achievements,\n  createdAt: doctor.createdAt.toISOString(),\n  updatedAt: doctor.updatedAt.toISOString()\n});\n\n// GET /api/doctors - Get all doctors with pagination and filtering\nexport const getAllDoctors: RequestHandler = async (req, res) => {\n  try {\n    await connectToDatabase();\n    \n    const query = DoctorQuerySchema.parse(req.query);\n    const { page, limit, search, department, specialization, status, shift } = query;\n    \n    // Build filter object\n    const filter: any = {};\n    \n    if (department) filter.department = new RegExp(department, 'i');\n    if (specialization) filter.specialization = new RegExp(specialization, 'i');\n    if (status) filter.status = status;\n    if (shift) filter.shift = shift;\n    \n    if (search) {\n      filter.$or = [\n        { name: new RegExp(search, 'i') },\n        { email: new RegExp(search, 'i') },\n        { employeeId: new RegExp(search, 'i') },\n        { specialization: new RegExp(search, 'i') },\n        { department: new RegExp(search, 'i') }\n      ];\n    }\n    \n    const skip = (page - 1) * limit;\n    \n    // Get total count and doctor data\n    const [total, doctors] = await Promise.all([\n      Doctor.countDocuments(filter),\n      Doctor.find(filter)\n        .sort({ createdAt: -1 })\n        .skip(skip)\n        .limit(limit)\n        .lean()\n    ]);\n    \n    const response: PaginatedResponse<DoctorResponse> = {\n      data: doctors.map(transformDoctorToResponse),\n      pagination: {\n        page,\n        limit,\n        total,\n        pages: Math.ceil(total / limit)\n      }\n    };\n    \n    res.json(response);\n  } catch (error) {\n    console.error('Error fetching doctors:', error);\n    res.status(500).json({ error: 'Failed to fetch doctors' });\n  }\n};\n\n// GET /api/doctors/:id - Get doctor by ID\nexport const getDoctorById: RequestHandler = async (req, res) => {\n  try {\n    await connectToDatabase();\n    \n    const doctor = await Doctor.findById(req.params.id).lean();\n    if (!doctor) {\n      return res.status(404).json({ error: 'Doctor not found' });\n    }\n    \n    res.json(transformDoctorToResponse(doctor));\n  } catch (error) {\n    console.error('Error fetching doctor:', error);\n    res.status(500).json({ error: 'Failed to fetch doctor' });\n  }\n};\n\n// POST /api/doctors - Create new doctor\nexport const createDoctor: RequestHandler = async (req, res) => {\n  try {\n    await connectToDatabase();\n    \n    const validatedData = CreateDoctorSchema.parse(req.body);\n    \n    // Check if employee ID, email, or medical license already exists\n    const existingDoctor = await Doctor.findOne({\n      $or: [\n        { employeeId: validatedData.employeeId },\n        { email: validatedData.email },\n        { medicalLicense: validatedData.medicalLicense }\n      ]\n    });\n    \n    if (existingDoctor) {\n      return res.status(400).json({ \n        error: 'Doctor with this employee ID, email, or medical license already exists' \n      });\n    }\n    \n    const doctor = new Doctor(validatedData);\n    await doctor.save();\n    \n    res.status(201).json(transformDoctorToResponse(doctor.toObject()));\n  } catch (error) {\n    console.error('Error creating doctor:', error);\n    if (error.name === 'ZodError') {\n      return res.status(400).json({ error: 'Invalid data', details: error.errors });\n    }\n    res.status(500).json({ error: 'Failed to create doctor' });\n  }\n};\n\n// PUT /api/doctors/:id - Update doctor\nexport const updateDoctor: RequestHandler = async (req, res) => {\n  try {\n    await connectToDatabase();\n    \n    const validatedData = UpdateDoctorSchema.parse(req.body);\n    \n    // Check if email or medical license is being updated and already exists\n    if (validatedData.email || validatedData.medicalLicense) {\n      const filter: any = { _id: { $ne: req.params.id } };\n      \n      if (validatedData.email && validatedData.medicalLicense) {\n        filter.$or = [\n          { email: validatedData.email },\n          { medicalLicense: validatedData.medicalLicense }\n        ];\n      } else if (validatedData.email) {\n        filter.email = validatedData.email;\n      } else if (validatedData.medicalLicense) {\n        filter.medicalLicense = validatedData.medicalLicense;\n      }\n      \n      const existingDoctor = await Doctor.findOne(filter);\n      \n      if (existingDoctor) {\n        return res.status(400).json({ \n          error: 'Doctor with this email or medical license already exists' \n        });\n      }\n    }\n    \n    const doctor = await Doctor.findByIdAndUpdate(\n      req.params.id,\n      validatedData,\n      { new: true, runValidators: true }\n    ).lean();\n    \n    if (!doctor) {\n      return res.status(404).json({ error: 'Doctor not found' });\n    }\n    \n    res.json(transformDoctorToResponse(doctor));\n  } catch (error) {\n    console.error('Error updating doctor:', error);\n    if (error.name === 'ZodError') {\n      return res.status(400).json({ error: 'Invalid data', details: error.errors });\n    }\n    res.status(500).json({ error: 'Failed to update doctor' });\n  }\n};\n\n// DELETE /api/doctors/:id - Delete doctor\nexport const deleteDoctor: RequestHandler = async (req, res) => {\n  try {\n    await connectToDatabase();\n    \n    const doctor = await Doctor.findByIdAndDelete(req.params.id);\n    if (!doctor) {\n      return res.status(404).json({ error: 'Doctor not found' });\n    }\n    \n    res.json({ message: 'Doctor deleted successfully' });\n  } catch (error) {\n    console.error('Error deleting doctor:', error);\n    res.status(500).json({ error: 'Failed to delete doctor' });\n  }\n};\n\n// GET /api/doctors/specializations - Get unique specializations\nexport const getSpecializations: RequestHandler = async (req, res) => {\n  try {\n    await connectToDatabase();\n    \n    const specializations = await Doctor.distinct('specialization');\n    res.json(specializations.sort());\n  } catch (error) {\n    console.error('Error fetching specializations:', error);\n    res.status(500).json({ error: 'Failed to fetch specializations' });\n  }\n};\n\n// GET /api/doctors/departments - Get unique departments\nexport const getDoctorDepartments: RequestHandler = async (req, res) => {\n  try {\n    await connectToDatabase();\n    \n    const departments = await Doctor.distinct('department');\n    res.json(departments.sort());\n  } catch (error) {\n    console.error('Error fetching departments:', error);\n    res.status(500).json({ error: 'Failed to fetch departments' });\n  }\n};\n\n// PATCH /api/doctors/:id/status - Update doctor status\nexport const updateDoctorStatus: RequestHandler = async (req, res) => {\n  try {\n    await connectToDatabase();\n    \n    const { status } = req.body;\n    if (!status) {\n      return res.status(400).json({ error: 'Status is required' });\n    }\n    \n    const doctor = await Doctor.findByIdAndUpdate(\n      req.params.id,\n      { status, lastActive: new Date() },\n      { new: true, runValidators: true }\n    ).lean();\n    \n    if (!doctor) {\n      return res.status(404).json({ error: 'Doctor not found' });\n    }\n    \n    res.json(transformDoctorToResponse(doctor));\n  } catch (error) {\n    console.error('Error updating doctor status:', error);\n    res.status(500).json({ error: 'Failed to update doctor status' });\n  }\n};\n\n// GET /api/doctors/available - Get available doctors for appointments\nexport const getAvailableDoctors: RequestHandler = async (req, res) => {\n  try {\n    await connectToDatabase();\n    \n    const { department, specialization } = req.query;\n    \n    const filter: any = { status: { $in: ['Available', 'On Call'] } };\n    \n    if (department) filter.department = department;\n    if (specialization) filter.specialization = specialization;\n    \n    const doctors = await Doctor.find(filter)\n      .select('name specialization department status rating consultationFee')\n      .sort({ rating: -1 })\n      .lean();\n    \n    res.json(doctors.map(transformDoctorToResponse));\n  } catch (error) {\n    console.error('Error fetching available doctors:', error);\n    res.status(500).json({ error: 'Failed to fetch available doctors' });\n  }\n};\n","import \"dotenv/config\";\nimport express from \"express\";\nimport cors from \"cors\";\nimport { handleDemo } from \"./routes/demo\";\nimport { connectToDatabase } from \"./db/connection\";\n\n// Staff routes\nimport {\n  getAllStaff,\n  getStaffById,\n  createStaff,\n  updateStaff,\n  deleteStaff,\n  getDepartments,\n  getRoles,\n  updateStaffStatus\n} from \"./routes/staff\";\n\n// Doctor routes\nimport {\n  getAllDoctors,\n  getDoctorById,\n  createDoctor,\n  updateDoctor,\n  deleteDoctor,\n  getSpecializations,\n  getDoctorDepartments,\n  updateDoctorStatus,\n  getAvailableDoctors\n} from \"./routes/doctors\";\n\nexport function createServer() {\n  const app = express();\n\n  // Initialize database connection\n  connectToDatabase().catch(console.error);\n\n  // Middleware\n  app.use(cors());\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: true }));\n\n  // Health check routes\n  app.get(\"/api/ping\", (_req, res) => {\n    const ping = process.env.PING_MESSAGE ?? \"ping\";\n    res.json({ message: ping });\n  });\n\n  app.get(\"/api/demo\", handleDemo);\n\n  // Staff API routes\n  app.get(\"/api/staff\", getAllStaff);\n  app.get(\"/api/staff/departments\", getDepartments);\n  app.get(\"/api/staff/roles\", getRoles);\n  app.get(\"/api/staff/:id\", getStaffById);\n  app.post(\"/api/staff\", createStaff);\n  app.put(\"/api/staff/:id\", updateStaff);\n  app.delete(\"/api/staff/:id\", deleteStaff);\n  app.patch(\"/api/staff/:id/status\", updateStaffStatus);\n\n  // Doctor API routes\n  app.get(\"/api/doctors\", getAllDoctors);\n  app.get(\"/api/doctors/available\", getAvailableDoctors);\n  app.get(\"/api/doctors/specializations\", getSpecializations);\n  app.get(\"/api/doctors/departments\", getDoctorDepartments);\n  app.get(\"/api/doctors/:id\", getDoctorById);\n  app.post(\"/api/doctors\", createDoctor);\n  app.put(\"/api/doctors/:id\", updateDoctor);\n  app.delete(\"/api/doctors/:id\", deleteDoctor);\n  app.patch(\"/api/doctors/:id/status\", updateDoctorStatus);\n\n  // Error handling middleware\n  app.use((err: any, _req: express.Request, res: express.Response, _next: express.NextFunction) => {\n    console.error('Server error:', err);\n    res.status(500).json({ error: 'Internal server error' });\n  });\n\n  return app;\n}\n","import path from \"path\";\nimport { createServer } from \"./index\";\nimport * as express from \"express\";\n\nconst app = createServer();\nconst port = process.env.PORT || 3000;\n\n// In production, serve the built SPA files\nconst __dirname = import.meta.dirname;\nconst distPath = path.join(__dirname, \"../spa\");\n\n// Serve static files\napp.use(express.static(distPath));\n\n// Handle React Router - serve index.html for all non-API routes\napp.get(\"*\", (req, res) => {\n  // Don't serve index.html for API routes\n  if (req.path.startsWith(\"/api/\") || req.path.startsWith(\"/health\")) {\n    return res.status(404).json({ error: \"API endpoint not found\" });\n  }\n\n  res.sendFile(path.join(distPath, \"index.html\"));\n});\n\napp.listen(port, () => {\n  console.log(`🚀 Fusion Starter server running on port ${port}`);\n  console.log(`📱 Frontend: http://localhost:${port}`);\n  console.log(`🔧 API: http://localhost:${port}/api`);\n});\n\n// Graceful shutdown\nprocess.on(\"SIGTERM\", () => {\n  console.log(\"🛑 Received SIGTERM, shutting down gracefully\");\n  process.exit(0);\n});\n\nprocess.on(\"SIGINT\", () => {\n  console.log(\"🛑 Received SIGINT, shutting down gracefully\");\n  process.exit(0);\n});\n"],"names":["app","express"],"mappings":"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"}